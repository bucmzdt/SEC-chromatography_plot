tanshi <-  c(46.875,70.4,50,28.125,44,63.5,37,65.6,78.2)
shire <-  c(62.5,57.6,15.6,8.3,13.2,45,54,50,57.6)
xueyu <-  c(57.14,44.8,50,14.285,60,17,53.5,40.2,50)
qiyu <-  c(60.71,44.8,68.7,7.1,62.1,48,57,53.5,53)
tebing <-  c(64.29,67.2,18.7,14.28,11.3,20,60.7,11.4,30)
tizhi <- c(qixu,yangxu,yinxu,tanshi,shire,xueyu,qiyu,tebing)
datas <- c()
for
dat <- as.data.frame(qixu,yangxu,yinxu,tanshi,shire,xueyu,qiyu,tebing)
colnames(dat) <- c("气虚" , "阳虚" , "阴虚" , "痰湿" , "湿热","血虚","气虚","特禀" )
rownames(dat) <- paste("person" , letters[1:9] , sep="-")
# 添加两行数据：最大值和最小值
data <- rbind(rep(50,5) , rep(0,5) , dat)
# 颜色
colors_border=c( rgb(0.2,0.5,0.5,0.9), rgb(0.8,0.2,0.5,0.9) , rgb(0.7,0.5,0.1,0.9) ,rgb(0.3,0.4,0.1,0.2),rgb(0.5,0.4,0.1,0.7),rgb(0.2,0.5,0.3,0.9),rgb(0.3,0.4,0.5,0.6),rgb(0.6,0.7,0.5,0.6))
colors_in=c( rgb(0.2,0.5,0.5,0.4), rgb(0.8,0.2,0.5,0.4) , rgb(0.7,0.5,0.1,0.4) ,rgb(0.3,0.4,0.1,0.1),rgb(0.5,0.4,0.1,0.3),rgb(0.2,0.5,0.3,0.4),rgb(0.3,0.4,0.5,0.2),rgb(0.6,0.7,0.5,0.6))
# 使用默认选项绘制
radarchart( dat, axistype=1 , pcol=colors_border , pfcol=colors_in , plwd=1 , plty=1,
cglcol="grey", cglty=2, axislabcol="grey", caxislabels=seq(0,120,20), cglwd=1,vlcex=1 ,title="八种病理体质")
# 添加图例
legend(x=0.7, y=1, legend = rownames(data[-c(1,2),]), bty = "n", pch=20 , col=colors_in , text.col = "grey", cex=1.2, pt.cex=3)
library(fmsb)
qixu <-  c(65.625,48,87.5,53.125,52.1,60.25,50,46.8,50)
yangxu <-  c(75,60.8,71.8,3.57,4.4,5,71,31.2,31)
yinxu <-  c(50,56,46.8,34.375,34.3,40,43,68.7,70.4)
tanshi <-  c(46.875,70.4,50,28.125,44,63.5,37,65.6,78.2)
shire <-  c(62.5,57.6,15.6,8.3,13.2,45,54,50,57.6)
xueyu <-  c(57.14,44.8,50,14.285,60,17,53.5,40.2,50)
qiyu <-  c(60.71,44.8,68.7,7.1,62.1,48,57,53.5,53)
tebing <-  c(64.29,67.2,18.7,14.28,11.3,20,60.7,11.4,30)
tizhi <- c(qixu,yangxu,yinxu,tanshi,shire,xueyu,qiyu,tebing)
datas <- c()
for
dat <- as.data.frame(qixu,yangxu,yinxu,tanshi,shire,xueyu,qiyu,tebing)
source("~/.active-rstudio-document", encoding = 'UTF-8')
source("~/.active-rstudio-document", encoding = 'UTF-8')
source("~/.active-rstudio-document", encoding = 'UTF-8')
qixu <-  c(65.625,48,87.5,53.125,52.1,60.25,50,46.8,50)
qixu <-  c(65.625,48,87.5,53.125,52.1,60.25,50,46.8,50)
qixu <- qixu/10
qixu
source("~/.active-rstudio-document", encoding = 'UTF-8')
dat <- data.frame(qixu,yangxu/10,yinxu/10,tanshi/10,shire/10,xueyu/10,qiyu/10,tebing/10)
source("~/.active-rstudio-document", encoding = 'UTF-8')
source("~/.active-rstudio-document", encoding = 'UTF-8')
source("~/.active-rstudio-document", encoding = 'UTF-8')
source("~/.active-rstudio-document", encoding = 'UTF-8')
source("~/.active-rstudio-document", encoding = 'UTF-8')
source("~/.active-rstudio-document", encoding = 'UTF-8')
source("~/.active-rstudio-document", encoding = 'UTF-8')
source("~/.active-rstudio-document", encoding = 'UTF-8')
source("~/.active-rstudio-document", encoding = 'UTF-8')
qixu <-  c(65.625,48,87.5,53.125,52.1,60.25,50,46.8,50)/10
qixu
source("~/.active-rstudio-document", encoding = 'UTF-8')
source("~/.active-rstudio-document", encoding = 'UTF-8')
source("~/.active-rstudio-document", encoding = 'UTF-8')
source("~/.active-rstudio-document", encoding = 'UTF-8')
source("~/.active-rstudio-document", encoding = 'UTF-8')
source("~/.active-rstudio-document", encoding = 'UTF-8')
source("~/.active-rstudio-document", encoding = 'UTF-8')
source("~/.active-rstudio-document", encoding = 'UTF-8')
source("~/.active-rstudio-document", encoding = 'UTF-8')
source("~/.active-rstudio-document", encoding = 'UTF-8')
source("~/.active-rstudio-document", encoding = 'UTF-8')
source("~/.active-rstudio-document", encoding = 'UTF-8')
source("~/.active-rstudio-document", encoding = 'UTF-8')
source("~/.active-rstudio-document", encoding = 'UTF-8')
source("~/.active-rstudio-document", encoding = 'UTF-8')
source("~/.active-rstudio-document", encoding = 'UTF-8')
source("~/.active-rstudio-document", encoding = 'UTF-8')
library(fmsb)
qixu <-  c(65.625,48,87.5,53.125,52.1,60.25,50,46.8,50)/10
yangxu <-  c(75,60.8,71.8,3.57,4.4,5,71,31.2,31)/10
yinxu <-  c(50,56,46.8,34.375,34.3,40,43,68.7,70.4)/10
tanshi <-  c(46.875,70.4,50,28.125,44,63.5,37,65.6,78.2)/10
shire <-  c(62.5,57.6,15.6,8.3,13.2,45,54,50,57.6)/10
xueyu <-  c(57.14,44.8,50,14.285,60,17,53.5,40.2,50)/10
qiyu <-  c(60.71,44.8,68.7,7.1,62.1,48,57,53.5,53)/10
tebing <-  c(64.29,67.2,18.7,14.28,11.3,20,60.7,11.4,30)/10
tizhi <- c(qixu,yangxu,yinxu,tanshi,shire,xueyu,qiyu,tebing)
datas <- c()
dat <- data.frame(qixu,yangxu,yinxu)
colnames(dat) <- c("气虚" , "阳虚" , "阴虚" )
rownames(dat) <- paste("person" , letters[1:3] , sep="-")
rownames(dat) <- paste("person" , letters[1:4] , sep="-")
rownames(dat) <- paste("person" , letters[1:2] , sep="-")
rownames(dat) <- paste("person" , letters[0:2] , sep="-")
rownames(dat) <- paste("person" , letters[0:3] , sep="-")
source("~/.active-rstudio-document", encoding = 'UTF-8')
source("~/.active-rstudio-document", encoding = 'UTF-8')
source("~/.active-rstudio-document", encoding = 'UTF-8')
source("~/.active-rstudio-document", encoding = 'UTF-8')
source("~/.active-rstudio-document", encoding = 'UTF-8')
source("~/.active-rstudio-document", encoding = 'UTF-8')
source("~/.active-rstudio-document", encoding = 'UTF-8')
source("~/.active-rstudio-document", encoding = 'UTF-8')
source("~/.active-rstudio-document", encoding = 'UTF-8')
source("~/.active-rstudio-document", encoding = 'UTF-8')
source("~/.active-rstudio-document", encoding = 'UTF-8')
source("~/.active-rstudio-document", encoding = 'UTF-8')
source("~/.active-rstudio-document", encoding = 'UTF-8')
source("~/.active-rstudio-document", encoding = 'UTF-8')
source("~/.active-rstudio-document", encoding = 'UTF-8')
source("~/.active-rstudio-document", encoding = 'UTF-8')
source("~/.active-rstudio-document", encoding = 'UTF-8')
source("~/.active-rstudio-document", encoding = 'UTF-8')

mtcars
source("~/.active-rstudio-document", encoding = 'UTF-8')
source("~/.active-rstudio-document", encoding = 'UTF-8')
dat
source("~/.active-rstudio-document", encoding = 'UTF-8')
source("~/.active-rstudio-document", encoding = 'UTF-8')
source("~/.active-rstudio-document", encoding = 'UTF-8')
source("~/.active-rstudio-document", encoding = 'UTF-8')
source("~/.active-rstudio-document", encoding = 'UTF-8')
source("~/.active-rstudio-document", encoding = 'UTF-8')
source("~/.active-rstudio-document", encoding = 'UTF-8')
source("~/.active-rstudio-document", encoding = 'UTF-8')
source("~/.active-rstudio-document", encoding = 'UTF-8')
source("~/.active-rstudio-document", encoding = 'UTF-8')
source("~/.active-rstudio-document", encoding = 'UTF-8')
source("~/.active-rstudio-document", encoding = 'UTF-8')
source("~/.active-rstudio-document", encoding = 'UTF-8')
source("~/.active-rstudio-document", encoding = 'UTF-8')
dat
mean(qiyu)
source("~/.active-rstudio-document", encoding = 'UTF-8')
install.packages("vcd")
library(vcd)
source("~/.active-rstudio-document", encoding = 'UTF-8')
install.packages("plotrix")
source("~/.active-rstudio-document", encoding = 'UTF-8')
source("~/.active-rstudio-document", encoding = 'UTF-8')
source("~/.active-rstudio-document", encoding = 'UTF-8')
source("~/.active-rstudio-document", encoding = 'UTF-8')
source("~/.active-rstudio-document", encoding = 'UTF-8')
source("~/.active-rstudio-document", encoding = 'UTF-8')
source("~/.active-rstudio-document", encoding = 'UTF-8')
tizhi
pct
source("~/.active-rstudio-document", encoding = 'UTF-8')
plot(cars)
plot(cars)
library(edgeR)
.library(limma)
library(limma)
library(ggplot2)
install.packages('installr')
library(installr)
updateR(cran_mirror="https://mirrors.tuna.tsinghua.edu.cn/CRAN/")
library(installr)
updateR(cran_mirror="https://mirrors.tuna.tsinghua.edu.cn/CRAN/")
GSE70213_expre <-read.csv(GSE70213_matrix.csv', ,header=TRUE,row.names=1)
expr.df <- read.table(file = "GSE42589_series_matrix.txt", header =TRUE,comment.char = "!", row.names=1)
BiocManager::install("GEOquery")
BiocManager::install("GEOquery")
.
library(GEOquery)
library(BiocManager)
BiocManager::install(edgeR)
BiocManager::install("edgeR")
BiocManager::install("edgeR")
dev.off() #关闭设备，保存绘图结果
#读取数据
data <- read.table(text = "group   count
10_(127-84)    892
5_(109-70)    45
6_(111-84)    19
33_(127-88)    33
37_(141-100)    15
30_(125-100)    14
other    108
", header = TRUE)
#将数据按照count倒序排列
data <- data[order(-data$count),]
#设定阈值，其他类别归于“other”
threshold <- 20
other_count <- sum(data$count[which(data$count < threshold)])
other_label <- paste("other (", other_count, ")", sep = "")
#将其他类别的数据加入到data中
data$group[nrow(data) + 1] <- other_label
data$count[nrow(data)] <- other_count
#绘制饼图
svg("pie_chart.svg") #指定导出svg文件的文件名
#读取数据
data <- read.table(text = "group   count
10_(127-84)    892
5_(109-70)    45
6_(111-84)    19
33_(127-88)    33
37_(141-100)    15
30_(125-100)    14
other    108
", header = TRUE)
#将数据按照count倒序排列
data <- data[order(-data$count),]
#设定阈值，其他类别归于“other”
threshold <- 20
other_count <- sum(data$count[which(data$count < threshold)])
other_label <- paste("other (", other_count, ")", sep = "")
#将其他类别的数据加入到data中
data$group[nrow(data) + 1] <- other_label
#将其他类别的数据加入到data中
data$group[nrow(data)] <- other_label
data$count[nrow(data)+1] <- other_count
library(readxl)
# 读取Excel文件数据
data <- read_excel("C:\\Users\\zdt\\Desktop\\科研画图\\工作簿3")
(readxl)
(readxl)
library(readxl)
# 读取Excel文件数据
data <- read_excel("C:\Users\zdt\Desktop\科研画图\工作簿3")
# 读取Excel文件数据
data <- read_excel("C:Users\zdt\Desktop\科研画图\工作簿3")
# 读取Excel文件数据
data <- read_excel("C:/Users/zdt/Desktop/科研画图/工作簿3")
#创建数据
labels <- c("10_(127-84)", "10_(127-84)", "6_(111-84)
", "33_(127-88)
", "37_(141-100)
","30_(125-100)
","other")
sizes <- c(892, 45, 19, 33, 15,14,108)
#绘制饼图
pie(sizes, labels = labels, main = "My Pie Chart")
#绘制饼图
pie(sizes, labels = labels, main = "My Pie Chart")
data <- read.table("10_(127-84)    892
6_(111-84)    19
33_(127-88)    33
37_(141-100)    15
30_(125-100)    14
other    108", header = FALSE, col.names = c("count", "group"))
# 设定阈值
threshold <- 20
# 将小于阈值的数据归为“Other”类别
other_count <- sum(data$count[which(data$count < threshold)])
other_label <- paste("Other (", other_count, ")", sep = "")
data$count[which(data$count < threshold)] <- 0
data$group[which(data$count < threshold)] <- ""
# 对数据进行排序
data <- data[order(-data$count),]
# 设定绘图参数
colors <- rainbow(length(data$count))
labels <- data$group
labels <- ifelse(data$count == 0, "", labels)
# 加载必要的包
library(ggplot2)
library(dplyr)
library(svglite)
folder_path <- "F:\\20250117SEC"  # 例如 "C:/Users/yourname/Documents/CSV_Files"
setwd(folder_path)
# 获取所有 CSV 文件的列表
#file_list <- list.files(path=folder_path, pattern="*.csv", full.names=TRUE)
file_list <- list.files(path=folder_path, pattern="\\.csv$", full.names=TRUE, ignore.case=TRUE)
#file_list <- list.files(path=folder_path, pattern="*.CSV|*.csv", full.names=TRUE, ignore.case=TRUE)
#更准确：确保只匹配 真正的 CSV 文件，而不会错误地匹配类似 "myfile_csv.txt" 这种文件（因为 _csv.txt 里也有 csv）。
#支持大小写匹配（通过 ignore.case=TRUE）：可以自动匹配 .CSV 和 .csv。
# 创建空的 data.frame 以存储所有数据
all_data <- data.frame()
normalize_minmax <- function(x) {
return((x - min(x, na.rm = TRUE)) / (max(x, na.rm = TRUE) - min(x, na.rm = TRUE)) * 100)
}
#设置颜色向量
color_vector <- c("red", "blue", "green", "purple", "orange", "cyan", "pink", "brown", "gray", "black")
# 读取所有 CSV 文件，并合并到 `all_data`
for (i in seq_along(file_list)) {
df <- read.csv(file_list[i], sep="\t", header=FALSE, stringsAsFactors=FALSE, fileEncoding="UTF-16")
colnames(df) <- c("Retention_Time", "UV_Absorbance")
df$Retention_Time <- as.numeric(df$Retention_Time)
df$UV_Absorbance <- as.numeric(df$UV_Absorbance)
df <- na.omit(df)
# 归一化 UV 吸收度
df$UV_Absorbance_MaxMin_Normalized <- normalize_minmax(df$UV_Absorbance)
# **去掉 .csv 后缀**
df$file_name <- as.character(gsub("\\.CSV$", "", basename(file_list[i]), ignore.case=TRUE))
#df$Group <- i  # 用于 3D 分层
df$Color <- color_vector[i %% length(color_vector) ]  # 按索引循环使用颜色
all_data <- bind_rows(all_data, df)
}
# 绘制不同颜色的平滑曲线
ggplot1=ggplot(all_data, aes(x=Retention_Time, y=UV_Absorbance, color=file_name)) +
#geom_smooth(method="loess", span=0.1, se=FALSE, size=0.7) + # 手动指定颜色# Loess 平滑曲线
geom_point(size=0, alpha=0.0) +  # 绘制散点
geom_line(size=0.6, linetype="solid")+ # 手动指定颜色# Loess 平滑曲线
scale_color_manual(values=color_vector) +
labs(title="Chromatography Curves for Multiple Files",
x="Retention Time (minutes)",
y="UV Absorbance",
color="test") +  # 图例标题
theme_minimal() +
theme(legend.position="right")  # 将图例放在右侧
ggplot1
# 绘制不同颜色的平滑曲线
ggplot1=ggplot(all_data, aes(x=Retention_Time, y=UV_Absorbance, color=file_name)) +
#geom_smooth(method="loess", span=0.1, se=FALSE, size=0.7) + # 手动指定颜色# Loess 平滑曲线
geom_point(size=0, alpha=0.0) +  # 绘制散点
geom_line(size=0.6, linetype="solid")+ # 手动指定颜色# Loess 平滑曲线
scale_color_manual(values=color_vector) +
xlim(0, 6) +  # 设置 X 轴显示范围
ylim(0, 8) + # 设置 Y 轴显示范围
labs(title="Chromatography Curves for Multiple Files",
x="Retention Time (minutes)",
y="UV Absorbance",
color="test") +  # 图例标题
theme_minimal() +
theme(legend.position="right")  # 将图例放在右侧
ggplot1
# 绘制不同颜色的平滑曲线
ggplot1=ggplot(all_data, aes(x=Retention_Time, y=UV_Absorbance, color=file_name)) +
#geom_smooth(method="loess", span=0.1, se=FALSE, size=0.7) + # 手动指定颜色# Loess 平滑曲线
geom_point(size=0, alpha=0.0) +  # 绘制散点
geom_line(size=0.6, linetype="solid")+ # 手动指定颜色# Loess 平滑曲线
scale_color_manual(values=color_vector) +
xlim(0, 6) +  # 设置 X 轴显示范围
ylim(-1, 8) + # 设置 Y 轴显示范围
labs(title="Chromatography Curves for Multiple Files",
x="Retention Time (minutes)",
y="UV Absorbance",
color="test") +  # 图例标题
theme_minimal() +
theme(legend.position="right")  # 将图例放在右侧
ggplot1
# 绘制不同颜色的平滑曲线
ggplot1=ggplot(all_data, aes(x=Retention_Time, y=UV_Absorbance, color=file_name)) +
#geom_smooth(method="loess", span=0.1, se=FALSE, size=0.7) + # 手动指定颜色# Loess 平滑曲线
geom_point(size=0, alpha=0.0) +  # 绘制散点
geom_line(size=0.6, linetype="solid")+ # 手动指定颜色# Loess 平滑曲线
scale_color_manual(values=color_vector) +
xlim(0, 6) +  # 设置 X 轴显示范围
ylim(-1, 10) + # 设置 Y 轴显示范围
labs(title="Chromatography Curves for Multiple Files",
x="Retention Time (minutes)",
y="UV Absorbance",
color="test") +  # 图例标题
theme_minimal() +
theme(legend.position="right")  # 将图例放在右侧
ggplot1
View(df)
# 加载必要的包
library(ggplot2)
library(dplyr)
library(svglite)
folder_path <- "F:\\20250117SEC"  # 例如 "C:/Users/yourname/Documents/CSV_Files"
setwd(folder_path)
# 获取所有 CSV 文件的列表
#file_list <- list.files(path=folder_path, pattern="*.csv", full.names=TRUE)
file_list <- list.files(path=folder_path, pattern="\\.csv$", full.names=TRUE, ignore.case=TRUE)
#file_list <- list.files(path=folder_path, pattern="*.CSV|*.csv", full.names=TRUE, ignore.case=TRUE)
#更准确：确保只匹配 真正的 CSV 文件，而不会错误地匹配类似 "myfile_csv.txt" 这种文件（因为 _csv.txt 里也有 csv）。
#支持大小写匹配（通过 ignore.case=TRUE）：可以自动匹配 .CSV 和 .csv。
# 创建空的 data.frame 以存储所有数据
all_data <- data.frame()
normalize_minmax <- function(x) {
return((x - min(x, na.rm = TRUE)) / (max(x, na.rm = TRUE) - min(x, na.rm = TRUE)) * 100)
}
#设置颜色向量
color_vector <- c("red", "blue", "green", "purple", "orange", "cyan", "pink", "brown", "gray", "black")
# 读取所有 CSV 文件，并合并到 `all_data`
for (i in seq_along(file_list)) {
df <- read.csv(file_list[i], sep="\t", header=FALSE, stringsAsFactors=FALSE, fileEncoding="UTF-16", skip = 300, nrows = 600)
colnames(df) <- c("Retention_Time", "UV_Absorbance")
df$Retention_Time <- as.numeric(df$Retention_Time)
df$UV_Absorbance <- as.numeric(df$UV_Absorbance)
df <- na.omit(df)
# 归一化 UV 吸收度
df$UV_Absorbance_MaxMin_Normalized <- normalize_minmax(df$UV_Absorbance)
# **去掉 .csv 后缀**
df$file_name <- as.character(gsub("\\.CSV$", "", basename(file_list[i]), ignore.case=TRUE))
#df$Group <- i  # 用于 3D 分层
df$Color <- color_vector[i %% length(color_vector) ]  # 按索引循环使用颜色
all_data <- bind_rows(all_data, df)
}
# 绘制不同颜色的平滑曲线
ggplot1=ggplot(all_data, aes(x=Retention_Time, y=UV_Absorbance, color=file_name)) +
#geom_smooth(method="loess", span=0.1, se=FALSE, size=0.7) + # 手动指定颜色# Loess 平滑曲线
geom_point(size=0, alpha=0.0) +  # 绘制散点
geom_line(size=0.6, linetype="solid")+ # 手动指定颜色# Loess 平滑曲线
scale_color_manual(values=color_vector) +
xlim(0, 6) +  # 设置 X 轴显示范围
ylim(-1, 10) + # 设置 Y 轴显示范围
labs(title="Chromatography Curves for Multiple Files",
x="Retention Time (minutes)",
y="UV Absorbance",
color="test") +  # 图例标题
theme_minimal() +
theme(legend.position="right")  # 将图例放在右侧
ggplot1
# 绘制不同颜色的平滑曲线
ggplot1=ggplot(all_data, aes(x=Retention_Time, y=UV_Absorbance, color=file_name)) +
#geom_smooth(method="loess", span=0.1, se=FALSE, size=0.7) + # 手动指定颜色# Loess 平滑曲线
geom_point(size=0, alpha=0.0) +  # 绘制散点
geom_line(size=0.6, linetype="solid")+ # 手动指定颜色# Loess 平滑曲线
scale_color_manual(values=color_vector) +
xlim(2, 6) +  # 设置 X 轴显示范围
ylim(-1, 10) + # 设置 Y 轴显示范围
labs(title="Chromatography Curves for Multiple Files",
x="Retention Time (minutes)",
y="UV Absorbance",
color="test") +  # 图例标题
theme_minimal() +
theme(legend.position="right")  # 将图例放在右侧
ggplot1
#ggsave("chromatography_plot.png", plot = ggplot1, width = 8, height = 5, dpi = 300,bg = "white")
#ggsave("chromatography_plot.eps", plot = ggplot1, width = 12, height = 8, dpi = 600, device = "eps")
#透明色
#ggsave("chromatography_plot.svg", plot = ggplot1, width = 8, height = 5, dpi = 300, device = "svg", bg = "transparent")
ggsave("chromatography_plot.pdf", plot = ggplot1, width = 8, height = 5, dpi = 300, device = "pdf")
# 绘制不同颜色的Normalized平滑曲线
ggplot2=ggplot(all_data, aes(x=Retention_Time, y=UV_Absorbance_MaxMin_Normalized, color=file_name)) +
#geom_smooth(method="loess", span=0.1, se=FALSE, size=0.7) +
geom_point(size=0, alpha=0.0) +  # 绘制散点
geom_line(size=0.6, linetype="solid")+ # 手动指定颜色# Loess 平滑曲线
scale_color_manual(values=color_vector) +
labs(title="Chromatography Curves for Multiple Files",
x="Retention Time (minutes)",
y="UV Absorbance",
color="test") +  # 图例标题
theme_minimal() +
theme(legend.position="right")  # 将图例放在右侧
ggplot2
#ggsave("chromatography_plot.eps", plot = ggplot2, width = 12, height = 8, dpi = 600, device = "eps")
ggsave("chromatography_plot.pdf", plot = ggplot2, width = 8, height = 5, dpi = 300, device = "pdf")
library(plotly)  # 3D 可视化
# 使用 plotly 绘制 3D 立体曲线图
p <- plot_ly(all_data, x = ~Retention_Time, y = ~UV_Absorbance, z = ~as.character(all_data$file_name),
type = 'scatter3d', mode = 'lines',
color = ~file_name,
colors = all_data$Color,# 让不同组用不同颜色
line = list(width = 4)) %>%
layout(title = "3D Chromatography Curves",
scene = list(xaxis = list(title = "Retention Time (minutes)"),
yaxis = list(title = "UV Absorbance"),
zaxis = list(title = "Group (File Index)")))
# 显示 3D 图像
p
htmlwidgets::saveWidget(p, "chromatography_3D_plot.html")#保存图像
# 使用 plotly 绘制 3D 立体曲线图
D3PlotNm<- plot_ly(all_data, x = ~Retention_Time, y = ~UV_Absorbance_MaxMin_Normalized, z = ~file_name,
type = 'scatter3d', mode = 'lines',
color = ~file_name,
colors = all_data$Color,# 让不同组用不同颜色
line = list(width = 4)) %>%
layout(title = "3D Chromatography Curves Normalized",
scene = list(xaxis = list(title = "Retention Time (minutes)"),
yaxis = list(title = "UV Absorbance"),
zaxis = list(title = "Group (File Index)")))
# 显示 3D 图像
D3PlotNm
# 使用 plotly 绘制 3D 立体曲线图
D3PlotNm<- plot_ly(all_data, x = ~Retention_Time, y = ~UV_Absorbance_MaxMin_Normalized, z = ~file_name,
type = 'scatter3d', mode = 'lines',
color = ~file_name,
colors = all_data$Color,# 让不同组用不同颜色
line = list(width = 4)) %>%
layout(title = "3D Chromatography Curves Normalized",
scene = list(xaxis = list(title = "Retention Time (minutes)"),
yaxis = list(title = "UV Absorbance Normalized (100%)"),
zaxis = list(title = "Group ")))
# 显示 3D 图像
D3PlotNm
# 使用 plotly 绘制 3D 立体曲线图
p <- plot_ly(all_data, x = ~Retention_Time, y = ~UV_Absorbance, z = ~as.character(all_data$file_name),
type = 'scatter3d', mode = 'lines',
color = ~file_name,
colors = all_data$Color,# 让不同组用不同颜色
line = list(width = 4)) %>%
layout(title = "3D Chromatography Curves",
scene = list(xaxis = list(title = "Retention Time (minutes)"),
yaxis = list(title = "280nM UV Absorbance (mA)"),
zaxis = list(title = "Group ")))
# 显示 3D 图像
p
htmlwidgets::saveWidget(p, "chromatography_3D_plot.html")#保存图像
# 绘制不同颜色的平滑曲线
ggplot1=ggplot(all_data, aes(x=Retention_Time, y=UV_Absorbance, color=file_name)) +
#geom_smooth(method="loess", span=0.1, se=FALSE, size=0.7) + # 手动指定颜色# Loess 平滑曲线
geom_point(size=0, alpha=0.0) +  # 绘制散点
geom_line(size=0.6, linetype="solid")+ # 手动指定颜色# Loess 平滑曲线
scale_color_manual(values=color_vector) +
xlim(2, 6) +  # 设置 X 轴显示范围
ylim(-1, 10) + # 设置 Y 轴显示范围
labs(title="Chromatography Curves for Multiple Files",
x="Retention Time (minutes)",
y="280nm UV Absorbance(mA) ",
color="test") +  # 图例标题
theme_minimal() +
theme(legend.position="right")  # 将图例放在右侧
ggplot1
#ggsave("chromatography_plot.png", plot = ggplot1, width = 8, height = 5, dpi = 300,bg = "white")
#ggsave("chromatography_plot.eps", plot = ggplot1, width = 12, height = 8, dpi = 600, device = "eps")
#透明色
#ggsave("chromatography_plot.svg", plot = ggplot1, width = 8, height = 5, dpi = 300, device = "svg", bg = "transparent")
ggsave("chromatography_plot.pdf", plot = ggplot1, width = 8, height = 5, dpi = 300, device = "pdf")
# 绘制不同颜色的Normalized平滑曲线
ggplot2=ggplot(all_data, aes(x=Retention_Time, y=UV_Absorbance_MaxMin_Normalized, color=file_name)) +
#geom_smooth(method="loess", span=0.1, se=FALSE, size=0.7) +
geom_point(size=0, alpha=0.0) +  # 绘制散点
geom_line(size=0.6, linetype="solid")+ # 手动指定颜色# Loess 平滑曲线
scale_color_manual(values=color_vector) +
labs(title="Chromatography Curves for Multiple Files",
x="Retention Time (minutes)",
y="UV Absorbance Normalized (100%)",
color="test") +  # 图例标题
theme_minimal() +
theme(legend.position="right")  # 将图例放在右侧
ggplot2
#ggsave("chromatography_plot.eps", plot = ggplot2, width = 12, height = 8, dpi = 600, device = "eps")
ggsave("chromatography_plot.pdf", plot = ggplot2, width = 8, height = 5, dpi = 300, device = "pdf")
